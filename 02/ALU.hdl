// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
      // xをゼロにする
      Mux16(sel=zx, b=false, a=true, out=NOT16zx);
      And16(a=x, b=NOT16zx, out=x1);

      // xを反転する
      Not16(in=x1, out=NOTx1);
      Mux16(sel=nx, b=NOTx1, a=x1, out=x2);

      // yをゼロにする
      Mux16(sel=zy, b=false, a=true, out=NOT16zy);
      And16(a=y, b=NOT16zy, out=y1);

      // yを反転する
      Not16(in=y1, out=NOTy1);
      Mux16(sel=ny, b=NOTy1, a=y1, out=y2);

      // fが1の時はx+y、0の時はx&y
      // xy
      And16(a=x2, b=y2, out=x2ANDy2);
      // x+y
      Add16(a=x2, b=y2, out=x2ADDy2);
      Mux16(sel=f, b=x2ADDy2, a=x2ANDy2, out=out1);

      // noが1の時はoutを反転、0の時はout
      Not16(in=out1, out=NOTout1);
      Mux16(sel=no, b=NOTout1, a=out1, out[0..7]=out2Low, out[8..14]=out2High, out[15]=out2HighHigh);

      // zrとngを計算する
      Or8Way(in=out2Low, out=orOut1);
      Or8Way(in[0..6]=out2High, in[7]=out2HighHigh, out=orOut2);

      // zrとngを計算する
      Or(a=orOut1,b=orOut2, out=orOut);
      Not(in=orOut, out=zr);

      // ngを計算する
      And(a=out2HighHigh, b=true, out=ng);
      And16(a[0..7]=out2Low, a[8..14]=out2High, a[15]=out2HighHigh, b=true, out=out);
}
